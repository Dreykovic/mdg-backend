// This file was auto-generated by prisma-generator-typescript-interfaces

export type ProfileName = "CUSTOMER" | "ADMIN" | "PARTNER";

export type TokenStatus = "ACTIVE" | "REVOKED";

export type VisibilityType = "DRAFT" | "VISIBLE" | "HIDDEN" | "ARCHIVED";

export type MovementType = "INCOMING" | "OUTGOING" | "TRANSFER" | "ADJUSTMENT" | "RETURN" | "STOCK_IN" | "STOCK_OUT";

export type MovementReason = "PURCHASE" | "SALE" | "TRANSFER" | "ADJUSTMENT_INVENTORY" | "ADJUSTMENT_DAMAGE" | "ADJUSTMENT_EXPIRY" | "RETURN_FROM_CUSTOMER" | "RETURN_TO_SUPPLIER" | "PRODUCTION" | "CONSUMPTION" | "ORDER" | "PURCHASE_ORDER" | "INVENTORY" | "DAMAGE" | "OTHER";

export type MovementStatus = "DRAFT" | "PLANNED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";

export type ValuationMethod = "FIFO" | "LIFO" | "WAC" | "FEFO";

export type UOMType = "WEIGHT" | "VOLUME" | "OTHER";

export type RecipeDifficultyType = "EASY" | "MEDIUM" | "HARD";

export interface User {
  id: string;
  username: string;
  email: string;
  profiles: ProfileName[];
  password: string;
  email_verified_at: Date | null;
  tokenFamilies?: TokenFamily[];
  recipes?: Recipe[];
  createdAt: Date;
  updatedAt: Date;
  createdStockMovements?: StockMovement[];
  approvedStockMovements?: StockMovement[];
  executedStockMovements?: StockMovement[];
}

export interface TokenFamily {
  id: number;
  family: string;
  deviceModel: string;
  ipAddress: string;
  userAgent: string;
  acceptLang: string;
  deviceType: string;
  deviceBrand: string;
  osName: string;
  osVersion: string;
  clientName: string;
  clientType: string;
  clientVersion: string;
  status: TokenStatus;
  createdAt: Date;
  updatedAt: Date;
  user?: User;
  userId: string;
  RefreshToken?: RefreshToken[];
}

export interface RefreshToken {
  id: number;
  token: string;
  expiresAt: Date;
  createdAt: Date;
  updatedAt: Date;
  status: TokenStatus;
  family?: TokenFamily;
  familyId: number;
  childrenTokens?: RefreshToken[];
  parentToken?: RefreshToken | null;
  parentTokenId: number | null;
}

export interface Origin {
  id: number;
  country: string;
  createdAt: Date;
  updatedAt: Date;
  products?: Product[];
}

export interface ProductCategory {
  id: number;
  name: string;
  description: string | null;
  imageRef: string | null;
  imageUrl: string | null;
  slug: string | null;
  Product?: Product[];
  createdAt: Date;
  updatedAt: Date;
}

export interface ProductTag {
  id: number;
  name: string;
  description: string | null;
  imageRef: string | null;
  imageUrl: string | null;
  slug: string | null;
  ProductTagLinks?: ProductTagLink[];
  createdAt: Date;
  updatedAt: Date;
}

export interface ProductTagLink {
  id: number;
  productId: string;
  productTagId: number;
  product?: Product;
  productTag?: ProductTag;
  createdAt: Date;
  updatedAt: Date;
}

export interface Supplier {
  id: number;
  name: string;
  address1: string;
  address2: string | null;
  city: string;
  state: string | null;
  postalCode: string;
  country: string;
  imageRef: string | null;
  products?: Product[];
  createdAt: Date;
  updatedAt: Date;
}

export interface MarginLevel {
  id: number;
  name: string;
  margin: number;
  products?: Product[];
  createdAt: Date;
  updatedAt: Date;
}

export interface UnitOfMeasure {
  id: number;
  name: string;
  type: UOMType;
  factor: number;
  isStandard: boolean;
  standardUnitId: number | null;
  derivedUnitOfMeasures?: UnitOfMeasure[];
  standardUnit?: UnitOfMeasure | null;
  ingredients?: Ingredient[];
  createdAt: Date;
  updatedAt: Date;
  volumeConversions?: VolumeConversion[];
}

export interface Product {
  id: string;
  name: string;
  isGlutenFree: boolean;
  isGMOFree: boolean;
  description: string | null;
  sku: string;
  isActive: boolean;
  isArchived: boolean;
  visibility: VisibilityType;
  isFeatured: boolean;
  additionalCost: number | null;
  costPerGramWhole: number;
  costPerGramGround: number;
  pricePerGramWhole: number;
  pricePerGramGround: number;
  originId: number;
  subcategoryId: number | null;
  categoryId: number;
  supplierId: number;
  marginLevelId: number;
  ingredients?: Ingredient[];
  productTagLinks?: ProductTagLink[];
  inventory?: Inventory | null;
  images?: ProductImage[];
  stockMovements?: StockMovement[];
  origin?: Origin;
  category?: ProductCategory;
  supplier?: Supplier;
  marginLevel?: MarginLevel;
  createdAt: Date;
  updatedAt: Date;
  volumeConversion?: VolumeConversion | null;
}

export interface ProductImage {
  id: string;
  url: string;
  altText: string | null;
  isFeatured: boolean;
  sortOrder: number;
  productId: string;
  product?: Product;
}

export interface Inventory {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  quantity: number;
  availableQuantity: number;
  reservedQuantity: number;
  minimumQuantity: number;
  maximumQuantity: number | null;
  safetyStockLevel: number;
  economicOrderQuantity: number | null;
  unitCost: number | null;
  totalValue: number | null;
  valuationMethod: ValuationMethod;
  reorderThreshold: number;
  reorderQuantity: number;
  leadTimeInDays: number | null;
  inStock: boolean;
  backOrderable: boolean;
  isActive: boolean;
  lastStockCheck: Date | null;
  nextScheduledCheck: Date | null;
  lastReceivedDate: Date | null;
  expiryDate: Date | null;
  stockLocation: string | null;
  notes: string | null;
  turnoverRate: number | null;
  productId: string | null;
  product?: Product | null;
  warehouseId: string;
  warehouse?: Warehouse;
  stockMovements?: StockMovement[];
}

export interface Warehouse {
  id: string;
  name: string;
  location: string | null;
  isDefault: boolean;
  inventories?: Inventory[];
  address: string | null;
  city: string | null;
  postalCode: string | null;
  country: string | null;
  capacity: number | null;
  isActive: boolean;
  sourceMovements?: StockMovement[];
  destinationMovements?: StockMovement[];
  createdAt: Date;
  updatedAt: Date;
}

export interface StockMovement {
  id: string;
  reference: string;
  quantity: number;
  unitCost: number | null;
  totalValue: number | null;
  movementType: MovementType;
  reason: MovementReason;
  status: MovementStatus;
  lotNumber: string | null;
  expiryDate: Date | null;
  batchId: string | null;
  isAdjustment: boolean;
  documentNumber: string | null;
  notes: string | null;
  metadata: JsonValue | null;
  createdAt: Date;
  updatedAt: Date;
  scheduledAt: Date | null;
  executedAt: Date | null;
  deletedAt: Date | null;
  version: number;
  inventoryId: string;
  inventory?: Inventory;
  productId: string;
  product?: Product;
  sourceWarehouseId: string | null;
  sourceWarehouse?: Warehouse | null;
  destinationWarehouseId: string | null;
  destinationWarehouse?: Warehouse | null;
  createdById: string;
  createdBy?: User;
  approvedById: string | null;
  approvedBy?: User | null;
  executedById: string | null;
  executedBy?: User | null;
  parentMovementId: string | null;
  parentMovement?: StockMovement | null;
  childMovements?: StockMovement[];
}

export interface RecipeCategory {
  id: number;
  name: string;
  imageRef: string | null;
  imageUrl: string | null;
  slug: string | null;
  description: string | null;
  recipes?: RecipeCategoryLink[];
  createdAt: Date;
  updatedAt: Date;
}

export interface RecipeCategoryLink {
  id: number;
  recipeId: number;
  categoryId: number;
  recipe?: Recipe;
  category?: RecipeCategory;
  createdAt: Date;
  updatedAt: Date;
}

export interface Recipe {
  id: number;
  name: string;
  description: string | null;
  preparationTime: number;
  cookingTime: number | null;
  servings: number | null;
  isApproved: boolean;
  isPromoAwarded: boolean;
  difficulty: RecipeDifficultyType;
  visibility: VisibilityType;
  userId: string;
  categories?: RecipeCategoryLink[];
  ingredients?: Ingredient[];
  steps?: Step[];
  author?: User;
  createdAt: Date;
  updatedAt: Date;
}

export interface Ingredient {
  id: number;
  name: string | null;
  quantity: number;
  grindRequired: boolean;
  recipeId: number;
  productId: string | null;
  unitOfMeasureId: number;
  unitOfMeasure?: UnitOfMeasure;
  product?: Product | null;
  recipe?: Recipe;
  createdAt: Date;
  updatedAt: Date;
}

export interface Step {
  id: number;
  recipeId: number;
  stepNumber: number;
  description: string;
  duration: number | null;
  recipe?: Recipe;
  createdAt: Date;
  updatedAt: Date;
}

export interface VolumeConversion {
  id: number;
  m1: number;
  m2: number;
  m3: number;
  avg: number;
  productId: string;
  stdVolId: number;
  stdVol?: UnitOfMeasure;
  product?: Product;
  createdAt: Date;
  updatedAt: Date;
}

type JsonValue = string | number | boolean | { [key in string]?: JsonValue } | Array<JsonValue> | null;
