generator client {
  provider = "prisma-client-js"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces" // Specifies the generator to create TypeScript interfaces for the Prisma schema.
  output   = "./dto/interfaces.ts"
}

datasource db {
  provider = "postgresql" // Default database provider is PostgreSQL. Adjust as needed.
  url      = env("DATABASE_URL")
}

// Enum for user profiles
enum ProfileName {
  CUSTOMER
  ADMIN
  PARTNER
}

// User model
model User {
  id                String        @id @default(uuid()) // Unique identifier
  username          String        @unique // Unique username
  email             String        @unique // Unique email
  profiles          ProfileName[] // Array of user profiles
  password          String // User's password
  email_verified_at DateTime? // Timestamp for email verification

  tokenFamilies  TokenFamily[] // Relation to token families
  recipes        Recipe[] // Relation to recipes created by the user
  createdAt      DateTime        @default(now()) // Timestamp for creation
  updatedAt      DateTime        @updatedAt // Timestamp for last update
  stockMovements StockMovement[]

  @@index([username, id, email]) // Compound index for fast lookups
}

// Enum for token status
enum TokenStatus {
  ACTIVE
  REVOKED
}

// Token family model for managing device-specific authentication
model TokenFamily {
  id Int @id @default(autoincrement())

  family        String         @unique // Unique family identifier
  deviceModel   String // User's device model
  ipAddress     String // IP address of the device
  userAgent     String // User agent string
  acceptLang    String // Accepted languages
  deviceType    String // Type of device
  deviceBrand   String // Brand of the device
  osName        String // Operating system name
  osVersion     String // Operating system version
  clientName    String // Client application name
  clientType    String // Type of client application
  clientVersion String // Version of the client application
  status        TokenStatus    @default(ACTIVE) // Status of the token
  createdAt     DateTime       @default(now()) // Creation timestamp
  updatedAt     DateTime       @updatedAt // Update timestamp
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the user
  userId        String
  RefreshToken  RefreshToken[] // Related refresh tokens

  @@index([family, status, userId]) // Compound index
}

// Refresh token model for managing authentication sessions
model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique // Unique refresh token

  expiresAt DateTime // Expiration time of the token
  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp

  status TokenStatus @default(ACTIVE) // Status of the token

  family         TokenFamily    @relation(fields: [familyId], references: [id], onDelete: Cascade) // Relation to token family
  familyId       Int
  childrenTokens RefreshToken[] @relation("ChildrenTokens") // Child tokens (nested refresh tokens)
  parentToken    RefreshToken?  @relation("ChildrenTokens", fields: [parentTokenId], references: [id]) // Parent token
  parentTokenId  Int?

  @@index([status, token, parentTokenId, familyId]) // Compound index
}

// Model for product origins
model Origin {
  id      Int    @id @default(autoincrement())
  country String @unique // Unique country of origin

  createdAt DateTime  @default(now()) // Creation timestamp
  updatedAt DateTime  @updatedAt // Update timestamp
  products  Product[] // Related products
}

// Model for product categories
model ProductCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique // Unique category name
  description String? // Optional description
  imageRef    String? @unique // Reference to image file
  imageUrl    String? // URL to the image
  slug        String? // URL-friendly identifier

  Product Product[] // Related products

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp
}

// Subcategory model for products
model ProductTag {
  id          Int     @id @default(autoincrement())
  name        String // Subcategory name
  description String? // Optional description

  imageRef String? @unique // Reference to image file
  imageUrl String? // URL to the image
  slug     String? // URL-friendly identifier

  ProductTagLinks ProductTagLink[] // Related Product Tag link
  createdAt       DateTime         @default(now()) // Creation timestamp
  updatedAt       DateTime         @updatedAt // Update timestamp

  @@unique([name]) // Unique constraint for category and name combination
}

model ProductTagLink {
  id           Int        @id @default(autoincrement())
  productId    String // reference to Product
  productTagId Int // reference to Product Tag
  product      Product    @relation(fields: [productId], references: [id]) // Related to the Product
  productTag   ProductTag @relation(fields: [productTagId], references: [id]) // Related TO ProductTag
  createdAt    DateTime   @default(now()) // Creation timestamp
  updatedAt    DateTime   @updatedAt // Update timestamp
}

// Supplier model for product providers
model Supplier {
  id         Int       @id @default(autoincrement())
  name       String // Supplier name
  address1   String // Address line 1
  address2   String? // Optional address line 2
  city       String // City
  state      String? // Optional state or region
  postalCode String // Postal code
  country    String // Country
  imageRef   String?   @unique // Reference to image file
  products   Product[] // Related products

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp

  @@unique([name, country, city, address1, postalCode]) // Unique constraint for identifying suppliers
}

// Model for margin levels applied to products
model MarginLevel {
  id       Int       @id @default(autoincrement())
  name     String    @unique // Unique margin level name
  margin   Float // Margin percentage
  products Product[] // Related products

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp
}

// Model for units of measure
model UnitOfMeasure {
  id             Int     @id @default(autoincrement())
  name           String  @unique // Unique unit name
  type           UOMType // Type of unit (e.g., weight, volume)
  factor         Float   @default(1) // Conversion factor
  isStandard     Boolean @default(false) // Flag for standard units
  standardUnitId Int? // Reference to standard unit

  derivedUnitOfMeasures UnitOfMeasure[] @relation("StandardUnit") // Derived units
  standardUnit          UnitOfMeasure?  @relation("StandardUnit", fields: [standardUnitId], references: [id], onDelete: SetNull) // Relation to standard unit
  ingredients           Ingredient[] // Related ingredients

  createdAt         DateTime           @default(now()) // Creation timestamp
  updatedAt         DateTime           @updatedAt // Update timestamp
  volumeConversions VolumeConversion[] // Volume conversion relationships
}

enum VisibilityType {
  DRAFT
  VISIBLE
  HIDDEN
  ARCHIVED
}

// Product model
model Product {
  id String @id @default(uuid()) // Unique identifier

  name         String  @unique // Product name
  isGlutenFree Boolean // Indicates if the product is gluten-free
  isGMOFree    Boolean // Indicates if the product is GMO-free
  description  String? // Product description
  sku          String  @unique // Stock Keeping Unit

  isActive       Boolean        @default(false) // Indicates if the product is active
  isArchived     Boolean        @default(false) // Indicates if the product is archived
  visibility     VisibilityType @default(DRAFT)
  isFeatured     Boolean        @default(false) // Indicates if the product is featured
  additionalCost Float?         @default(0) // Additional cost

  costPerGramWhole   Float // Cost per gram (whole form)
  costPerGramGround  Float // Cost per gram (ground form)
  pricePerGramWhole  Float // Price per gram (whole form)
  pricePerGramGround Float // Price per gram (ground form)

  originId      Int // Reference to origin
  subcategoryId Int? // Optional reference to subcategory
  categoryId    Int // Reference to category
  supplierId    Int // Reference to supplier
  marginLevelId Int // Reference to margin level

  ingredients     Ingredient[] // Related ingredients in recipes
  ProductTagLinks ProductTagLink[] // Related Product Tag link
  inventory       Inventory?
  // Media
  images          ProductImage[]

  origin Origin @relation(fields: [originId], references: [id]) // Relation to origin

  category ProductCategory @relation(fields: [categoryId], references: [id]) // Relation to category
  supplier Supplier        @relation(fields: [supplierId], references: [id]) // Relation to supplier

  marginLevel      MarginLevel       @relation(fields: [marginLevelId], references: [id]) // Relation to margin level
  createdAt        DateTime          @default(now()) // Creation timestamp
  updatedAt        DateTime          @updatedAt // Update timestamp
  volumeConversion VolumeConversion? // Relation to volume conversion
}

model ProductImage {
  id         String  @id @default(uuid())
  url        String
  altText    String?
  isFeatured Boolean @default(false)
  sortOrder  Int     @default(0)
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Inventory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Stock information
  quantity          Float @default(0)
  availableQuantity Float @default(0) // Accounts for reserved items
  reservedQuantity  Float @default(0) // Items in carts or pending orders

  // Reorder information
  reorderThreshold Float @default(5)
  reorderQuantity  Float @default(10)

  // Stock status
  inStock       Boolean @default(true)
  backOrderable Boolean @default(false)

  // Stock tracking
  lastStockCheck     DateTime?
  nextScheduledCheck DateTime?

  // Relationships
  productId String?  @unique
  product   Product? @relation(fields: [productId], references: [id])

  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  // Stock movements
  stockMovements StockMovement[]
}

model Warehouse {
  id          String      @id @default(uuid())
  name        String      @unique
  location    String?
  isDefault   Boolean     @default(false)
  inventories Inventory[]
}

model StockMovement {
  id String @id @default(uuid())

  // Movement details
  quantity Int
  type     MovementType
  notes    String?

  // Reference to related documents
  referenceType String? // e.g., "order", "purchase_order", "adjustment"
  referenceId   String? // ID of the related document

  // Relationships
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  userId      String? // Who performed the operation
  user        User?     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

enum MovementType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  TRANSFER
  RETURN
  DAMAGE
}

// Enumeration for unit of measure types
enum UOMType {
  WEIGHT
  VOLUME
  OTHER
}

// Recipe model
model RecipeCategory {
  id          Int                  @id @default(autoincrement())
  name        String               @unique // Unique category name
  imageRef    String?              @unique // Reference to image file
  imageUrl    String? // URL to the image
  slug        String? // URL-friendly identifier
  description String? // Optional description
  recipes     RecipeCategoryLink[] // Many-to-many relationship with recipes
  createdAt   DateTime             @default(now()) // Creation timestamp
  updatedAt   DateTime             @updatedAt // Update timestamp
}

model RecipeCategoryLink {
  id         Int @id @default(autoincrement())
  recipeId   Int // Reference to recipe
  categoryId Int // Reference to category

  recipe    Recipe         @relation(fields: [recipeId], references: [id]) // Relation to recipe
  category  RecipeCategory @relation(fields: [categoryId], references: [id]) // Relation to category
  createdAt DateTime       @default(now()) // Creation timestamp
  updatedAt DateTime       @updatedAt // Update timestamp

  @@unique([recipeId, categoryId]) // Unique constraint for recipe-category pairs
}

// Enumeration for recipe difficulty levels
enum RecipeDifficultyType {
  EASY
  MEDIUM
  HARD
}

// Main recipe model
model Recipe {
  id              Int                  @id @default(autoincrement())
  name            String               @unique // Unique recipe name
  description     String? // Optional description
  preparationTime Int // Preparation time in minutes
  cookingTime     Int? // Cooking time in minutes
  servings        Int? // Number of servings
  isApproved      Boolean              @default(false) // Approval status
  isPromoAwarded  Boolean              @default(false) // Promo status
  difficulty      RecipeDifficultyType @default(EASY) // Difficulty level
  visibility      VisibilityType       @default(DRAFT)
  userId          String // Reference to author
  categories      RecipeCategoryLink[] // Many-to-many relationship with categories
  ingredients     Ingredient[] // Relation to ingredients
  steps           Step[] // Relation to recipe steps
  author          User                 @relation(fields: [userId], references: [id]) // Relation to author
  createdAt       DateTime             @default(now()) // Creation timestamp
  updatedAt       DateTime             @updatedAt // Update timestamp
}

// Ingredient model for recipes
model Ingredient {
  id            Int     @id @default(autoincrement())
  name          String?
  quantity      Float // Quantity required
  grindRequired Boolean // Indicates if grinding is required

  recipeId        Int // Reference to recipe
  productId       String? // Reference to product
  unitOfMeasureId Int // Reference to unit of measure
  unitOfMeasure   UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id]) // Relation to unit of measure
  product         Product?      @relation(fields: [productId], references: [id]) // Relation to product
  recipe          Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade) // Relation to recipe
  createdAt       DateTime      @default(now()) // Creation timestamp
  updatedAt       DateTime      @updatedAt // Update timestamp

  @@unique([recipeId, productId]) // Unique constraint for recipe-product pairs
  @@unique([recipeId, name])
}

// Model for recipe steps
model Step {
  id          Int    @id @default(autoincrement())
  recipeId    Int // Reference to recipe
  stepNumber  Int // Step number
  description String // Description of the step
  duration    Int? // Optional duration in minutes

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade) // Relation to recipe
  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp
}

// Model for volume conversion
model VolumeConversion {
  id        Int           @id @default(autoincrement())
  m1        Float // Conversion factor 1
  m2        Float // Conversion factor 2
  m3        Float // Conversion factor 3
  avg       Float // Average conversion factor
  productId String        @unique // Reference to product
  stdVolId  Int // Reference to standard volume
  stdVol    UnitOfMeasure @relation(fields: [stdVolId], references: [id]) // Relation to standard volume
  product   Product       @relation(fields: [productId], references: [id]) // Relation to product
  createdAt DateTime      @default(now()) // Creation timestamp
  updatedAt DateTime      @updatedAt // Update timestamp
}
